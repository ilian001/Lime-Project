
project test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000006f0  00000784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800120  00800120  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdd  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	8f c0       	rjmp	.+286    	; 0x154 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	56 01       	movw	r10, r12
  8e:	60 01       	movw	r12, r0
  90:	64 01       	movw	r12, r8
  92:	68 01       	movw	r12, r16
  94:	6c 01       	movw	r12, r24
  96:	70 01       	movw	r14, r0
  98:	74 01       	movw	r14, r8
  9a:	78 01       	movw	r14, r16
  9c:	83 01       	movw	r16, r6
  9e:	98 01       	movw	r18, r16
  a0:	9e 01       	movw	r18, r28
  a2:	a4 01       	movw	r20, r8
  a4:	aa 01       	movw	r20, r20
  a6:	b0 01       	movw	r22, r0
  a8:	b6 01       	movw	r22, r12
  aa:	bc 01       	movw	r22, r24
  ac:	c3 01       	movw	r24, r6

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 ef       	ldi	r30, 0xF0	; 240
  c2:	f6 e0       	ldi	r31, 0x06	; 6
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a0 32       	cpi	r26, 0x20	; 32
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e2       	ldi	r26, 0x20	; 32
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ac 32       	cpi	r26, 0x2C	; 44
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	62 d1       	rcall	.+708    	; 0x3aa <main>
  e6:	02 c3       	rjmp	.+1540   	; 0x6ec <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  ea:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <_avr_timer_M>
  ee:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <_avr_timer_M+0x1>
  f2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_M+0x2>
  f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_M+0x3>
  fa:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <_avr_timer_cntcurr>
  fe:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <_avr_timer_cntcurr+0x1>
 102:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <_avr_timer_cntcurr+0x2>
 106:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <_avr_timer_cntcurr+0x3>
 10a:	08 95       	ret

0000010c <TimerOn>:
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 124:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 128:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_avr_timer_M>
 130:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_avr_timer_M+0x1>
 134:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_avr_timer_M+0x2>
 138:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_avr_timer_M+0x3>
 13c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_avr_timer_cntcurr>
 140:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <_avr_timer_cntcurr+0x1>
 144:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <_avr_timer_cntcurr+0x2>
 148:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <_avr_timer_cntcurr+0x3>
 14c:	8f b7       	in	r24, 0x3f	; 63
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	8f bf       	out	0x3f, r24	; 63
 152:	08 95       	ret

00000154 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 166:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_avr_timer_cntcurr>
 16a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <_avr_timer_cntcurr+0x1>
 16e:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x2>
 172:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <_avr_timer_cntcurr+0x3>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	a1 09       	sbc	r26, r1
 17a:	b1 09       	sbc	r27, r1
 17c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_avr_timer_cntcurr>
 180:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <_avr_timer_cntcurr+0x1>
 184:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <_avr_timer_cntcurr+0x2>
 188:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 18c:	89 2b       	or	r24, r25
 18e:	8a 2b       	or	r24, r26
 190:	8b 2b       	or	r24, r27
 192:	99 f4       	brne	.+38     	; 0x1ba <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 19a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_avr_timer_M>
 19e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_avr_timer_M+0x1>
 1a2:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_avr_timer_M+0x2>
 1a6:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_avr_timer_M+0x3>
 1aa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_avr_timer_cntcurr>
 1ae:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <_avr_timer_cntcurr+0x1>
 1b2:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <_avr_timer_cntcurr+0x2>
 1b6:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <_avr_timer_cntcurr+0x3>
	}
}
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <set_PWM>:
unsigned char input = 0x00;
unsigned char count = 0x00;
double freqs[] = {987.77,783.99,659.25,493.88,392,329.63,261.63};
//987.77,783.99,659.25,493.88,392,329.63,261.63

void set_PWM(double frequency) {
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	6b 01       	movw	r12, r22
 1d6:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 1e0:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x1>
 1e4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0x2>
 1e8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x3>
 1ec:	fd d0       	rcall	.+506    	; 0x3e8 <__cmpsf2>
 1ee:	88 23       	and	r24, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <set_PWM+0x28>
 1f2:	40 c0       	rjmp	.+128    	; 0x274 <set_PWM+0xa8>
		if (!frequency) { TCCR0B &= 0x08; } //stops timer/counter
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	a9 01       	movw	r20, r18
 1fa:	c7 01       	movw	r24, r14
 1fc:	b6 01       	movw	r22, r12
 1fe:	f4 d0       	rcall	.+488    	; 0x3e8 <__cmpsf2>
 200:	81 11       	cpse	r24, r1
 202:	04 c0       	rjmp	.+8      	; 0x20c <set_PWM+0x40>
 204:	85 b5       	in	r24, 0x25	; 37
 206:	88 70       	andi	r24, 0x08	; 8
 208:	85 bd       	out	0x25, r24	; 37
 20a:	03 c0       	rjmp	.+6      	; 0x212 <set_PWM+0x46>
		else { TCCR0B |= 0x03; } // resumes/continues timer/counter
 20c:	85 b5       	in	r24, 0x25	; 37
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	85 bd       	out	0x25, r24	; 37
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR0A = 0xFFFF; }
 212:	28 e5       	ldi	r18, 0x58	; 88
 214:	39 e3       	ldi	r19, 0x39	; 57
 216:	44 e7       	ldi	r20, 0x74	; 116
 218:	5f e3       	ldi	r21, 0x3F	; 63
 21a:	c7 01       	movw	r24, r14
 21c:	b6 01       	movw	r22, r12
 21e:	e4 d0       	rcall	.+456    	; 0x3e8 <__cmpsf2>
 220:	88 23       	and	r24, r24
 222:	1c f4       	brge	.+6      	; 0x22a <set_PWM+0x5e>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	87 bd       	out	0x27, r24	; 39
 228:	1c c0       	rjmp	.+56     	; 0x262 <set_PWM+0x96>
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR0A = 0x0000; }
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	34 e2       	ldi	r19, 0x24	; 36
 22e:	44 ef       	ldi	r20, 0xF4	; 244
 230:	56 e4       	ldi	r21, 0x46	; 70
 232:	c7 01       	movw	r24, r14
 234:	b6 01       	movw	r22, r12
 236:	ea d1       	rcall	.+980    	; 0x60c <__gesf2>
 238:	18 16       	cp	r1, r24
 23a:	14 f4       	brge	.+4      	; 0x240 <set_PWM+0x74>
 23c:	17 bc       	out	0x27, r1	; 39
 23e:	11 c0       	rjmp	.+34     	; 0x262 <set_PWM+0x96>
		
		// set OCR3A based on desired frequency
		else { OCR0A = (short)(8000000 / (128 * frequency)) - 1; }
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	53 e4       	ldi	r21, 0x43	; 67
 248:	c7 01       	movw	r24, r14
 24a:	b6 01       	movw	r22, r12
 24c:	e3 d1       	rcall	.+966    	; 0x614 <__mulsf3>
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	74 e2       	ldi	r23, 0x24	; 36
 256:	84 ef       	ldi	r24, 0xF4	; 244
 258:	9a e4       	ldi	r25, 0x4A	; 74
 25a:	ca d0       	rcall	.+404    	; 0x3f0 <__divsf3>
 25c:	31 d1       	rcall	.+610    	; 0x4c0 <__fixsfsi>
 25e:	61 50       	subi	r22, 0x01	; 1
 260:	67 bd       	out	0x27, r22	; 39

		TCNT0 = 0; // resets counter
 262:	16 bc       	out	0x26, r1	; 38
		current_frequency = frequency; // Updates the current frequency
 264:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <__data_end>
 268:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <__data_end+0x1>
 26c:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <__data_end+0x2>
 270:	f0 92 23 01 	sts	0x0123, r15	; 0x800123 <__data_end+0x3>
	}
}
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	08 95       	ret

0000027e <PWM_on>:

void PWM_on() {
	TCCR0A = (1 << COM0A0) | (1 << WGM00);
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	84 bd       	out	0x24, r24	; 36
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 282:	8b e0       	ldi	r24, 0x0B	; 11
 284:	85 bd       	out	0x25, r24	; 37
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	cb 01       	movw	r24, r22
 28c:	9f cf       	rjmp	.-194    	; 0x1cc <set_PWM>
 28e:	08 95       	ret

00000290 <PWM_off>:
}

void PWM_off() {
	TCCR0A = 0x00;
 290:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 292:	15 bc       	out	0x25, r1	; 37
 294:	08 95       	ret

00000296 <BuzzOn>:
}

enum StatesBuzz {init,b1,b2,b3,b4,b5,b6,b7,turnoff} stateBuzz;
void BuzzOn() {
	switch(stateBuzz) {			//transition
 296:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <stateBuzz>
 29a:	8e 2f       	mov	r24, r30
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	89 30       	cpi	r24, 0x09	; 9
 2a0:	91 05       	cpc	r25, r1
 2a2:	c8 f5       	brcc	.+114    	; 0x316 <BuzzOn+0x80>
 2a4:	fc 01       	movw	r30, r24
 2a6:	ea 5b       	subi	r30, 0xBA	; 186
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	17 c2       	rjmp	.+1070   	; 0x6da <__tablejump2__>
		case init:
			PWM_off();
 2ac:	f1 df       	rcall	.-30     	; 0x290 <PWM_off>
 2ae:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <input>
			if(input) {
 2b2:	88 23       	and	r24, r24
 2b4:	81 f1       	breq	.+96     	; 0x316 <BuzzOn+0x80>
				PWM_on();
 2b6:	e3 df       	rcall	.-58     	; 0x27e <PWM_on>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
				stateBuzz = b1;
 2ba:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2be:	38 c0       	rjmp	.+112    	; 0x330 <BuzzOn+0x9a>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
			}
		break;
		case b1:
			stateBuzz = b2;
 2c2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2c6:	3a c0       	rjmp	.+116    	; 0x33c <BuzzOn+0xa6>
 2c8:	83 e0       	ldi	r24, 0x03	; 3
		break;
		case b2:
			stateBuzz = b3;
 2ca:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2ce:	3c c0       	rjmp	.+120    	; 0x348 <BuzzOn+0xb2>
 2d0:	84 e0       	ldi	r24, 0x04	; 4
		break;
		case b3:
			stateBuzz = b4;
 2d2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2d6:	3e c0       	rjmp	.+124    	; 0x354 <BuzzOn+0xbe>
 2d8:	85 e0       	ldi	r24, 0x05	; 5
		break;	
		case b4:
			stateBuzz = b5;
 2da:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2de:	40 c0       	rjmp	.+128    	; 0x360 <BuzzOn+0xca>
 2e0:	86 e0       	ldi	r24, 0x06	; 6
		break;	
		case b5:
			stateBuzz = b6;
 2e2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2e6:	42 c0       	rjmp	.+132    	; 0x36c <BuzzOn+0xd6>
 2e8:	87 e0       	ldi	r24, 0x07	; 7
		break;
		case b6:
			stateBuzz = b7;
 2ea:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
 2ee:	44 c0       	rjmp	.+136    	; 0x378 <BuzzOn+0xe2>
		break;
 2f0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <input>
		case b7:
			if(!input) {
 2f4:	81 11       	cpse	r24, r1
 2f6:	40 c0       	rjmp	.+128    	; 0x378 <BuzzOn+0xe2>
 2f8:	88 e0       	ldi	r24, 0x08	; 8
				stateBuzz = turnoff;
 2fa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <stateBuzz>
				count = 0;
 2fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <count>
				PWM_on();
 302:	bd df       	rcall	.-134    	; 0x27e <PWM_on>
 304:	08 c0       	rjmp	.+16     	; 0x316 <BuzzOn+0x80>
 306:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <count>
			}
		break;
		case turnoff:
		if(count > 7) {
 30a:	88 30       	cpi	r24, 0x08	; 8
 30c:	08 f4       	brcc	.+2      	; 0x310 <BuzzOn+0x7a>
 30e:	3b c0       	rjmp	.+118    	; 0x386 <BuzzOn+0xf0>
 310:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateBuzz>
			stateBuzz = init;
 314:	08 95       	ret
 316:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <stateBuzz>
		}
		break;
	}
	switch(stateBuzz) {			//action
 31a:	8e 2f       	mov	r24, r30
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	e8 30       	cpi	r30, 0x08	; 8
 324:	f1 05       	cpc	r31, r1
 326:	08 f0       	brcs	.+2      	; 0x32a <BuzzOn+0x94>
 328:	3f c0       	rjmp	.+126    	; 0x3a8 <BuzzOn+0x112>
 32a:	e1 5b       	subi	r30, 0xB1	; 177
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	d5 c1       	rjmp	.+938    	; 0x6da <__tablejump2__>
 330:	64 ea       	ldi	r22, 0xA4	; 164
		case init:
		break;
		case b1:
			set_PWM(261.63);	
 332:	70 ed       	ldi	r23, 0xD0	; 208
 334:	82 e8       	ldi	r24, 0x82	; 130
 336:	93 e4       	ldi	r25, 0x43	; 67
 338:	49 cf       	rjmp	.-366    	; 0x1cc <set_PWM>
 33a:	08 95       	ret
		break;
 33c:	64 ea       	ldi	r22, 0xA4	; 164
		case b2:
			set_PWM(329.63);
 33e:	70 ed       	ldi	r23, 0xD0	; 208
 340:	84 ea       	ldi	r24, 0xA4	; 164
 342:	93 e4       	ldi	r25, 0x43	; 67
 344:	43 cf       	rjmp	.-378    	; 0x1cc <set_PWM>
 346:	08 95       	ret
		break;
 348:	60 e0       	ldi	r22, 0x00	; 0
		case b3:
			set_PWM(392);
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	84 ec       	ldi	r24, 0xC4	; 196
 34e:	93 e4       	ldi	r25, 0x43	; 67
 350:	3d cf       	rjmp	.-390    	; 0x1cc <set_PWM>
 352:	08 95       	ret
		break;
 354:	64 ea       	ldi	r22, 0xA4	; 164
		case b4:
			set_PWM(493.88);
 356:	70 ef       	ldi	r23, 0xF0	; 240
 358:	86 ef       	ldi	r24, 0xF6	; 246
 35a:	93 e4       	ldi	r25, 0x43	; 67
 35c:	37 cf       	rjmp	.-402    	; 0x1cc <set_PWM>
 35e:	08 95       	ret
		break;
 360:	60 e0       	ldi	r22, 0x00	; 0
		case b5:
			set_PWM(659.25);
 362:	70 ed       	ldi	r23, 0xD0	; 208
 364:	84 e2       	ldi	r24, 0x24	; 36
 366:	94 e4       	ldi	r25, 0x44	; 68
 368:	31 cf       	rjmp	.-414    	; 0x1cc <set_PWM>
 36a:	08 95       	ret
		break;
 36c:	6c e5       	ldi	r22, 0x5C	; 92
		case b6:
			set_PWM(783.99);
 36e:	7f ef       	ldi	r23, 0xFF	; 255
 370:	83 e4       	ldi	r24, 0x43	; 67
 372:	94 e4       	ldi	r25, 0x44	; 68
 374:	2b cf       	rjmp	.-426    	; 0x1cc <set_PWM>
		break;
 376:	08 95       	ret
		case b7:
			set_PWM(987.77);
 378:	68 e4       	ldi	r22, 0x48	; 72
 37a:	71 ef       	ldi	r23, 0xF1	; 241
 37c:	86 e7       	ldi	r24, 0x76	; 118
 37e:	94 e4       	ldi	r25, 0x44	; 68
 380:	25 df       	rcall	.-438    	; 0x1cc <set_PWM>
 382:	86 cf       	rjmp	.-244    	; 0x290 <PWM_off>
			PWM_off();
 384:	08 95       	ret
 386:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <count>
		break;
		case turnoff:
			count++;
 38a:	ef 5f       	subi	r30, 0xFF	; 255
 38c:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <count>
 390:	f0 e0       	ldi	r31, 0x00	; 0
			set_PWM(freqs[count]);
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	e0 50       	subi	r30, 0x00	; 0
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	60 81       	ld	r22, Z
 3a0:	71 81       	ldd	r23, Z+1	; 0x01
 3a2:	82 81       	ldd	r24, Z+2	; 0x02
 3a4:	93 81       	ldd	r25, Z+3	; 0x03
 3a6:	12 cf       	rjmp	.-476    	; 0x1cc <set_PWM>
 3a8:	08 95       	ret

000003aa <main>:
 3aa:	11 b8       	out	0x01, r1	; 1
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;	
 3ae:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 3b0:	84 b9       	out	0x04, r24	; 4
 3b2:	15 b8       	out	0x05, r1	; 5
	PWM_on();
 3b4:	64 df       	rcall	.-312    	; 0x27e <PWM_on>
	set_PWM(1);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	9f e3       	ldi	r25, 0x3F	; 63
 3be:	06 df       	rcall	.-500    	; 0x1cc <set_PWM>
	TimerSet(100);
 3c0:	64 e6       	ldi	r22, 0x64	; 100
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3c8:	90 de       	rcall	.-736    	; 0xea <TimerSet>
 3ca:	a0 de       	rcall	.-704    	; 0x10c <TimerOn>
	
	stateBuzz = init;
 3cc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateBuzz>
	
    while (1) 
    {
		input = ~PINA;
 3d0:	80 b1       	in	r24, 0x00	; 0
 3d2:	80 95       	com	r24
 3d4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <input>
		BuzzOn();	
 3d8:	5e df       	rcall	.-324    	; 0x296 <BuzzOn>
		while(!TimerFlag);
 3da:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <TimerFlag>
 3de:	88 23       	and	r24, r24
 3e0:	e1 f3       	breq	.-8      	; 0x3da <main+0x30>
		TimerFlag = 0;
 3e2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TimerFlag>
    }
 3e6:	f4 cf       	rjmp	.-24     	; 0x3d0 <main+0x26>

000003e8 <__cmpsf2>:
 3e8:	9c d0       	rcall	.+312    	; 0x522 <__fp_cmp>
 3ea:	08 f4       	brcc	.+2      	; 0x3ee <__cmpsf2+0x6>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret

000003f0 <__divsf3>:
 3f0:	0c d0       	rcall	.+24     	; 0x40a <__divsf3x>
 3f2:	d2 c0       	rjmp	.+420    	; 0x598 <__fp_round>
 3f4:	ca d0       	rcall	.+404    	; 0x58a <__fp_pscB>
 3f6:	40 f0       	brcs	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	c1 d0       	rcall	.+386    	; 0x57c <__fp_pscA>
 3fa:	30 f0       	brcs	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	5f 3f       	cpi	r21, 0xFF	; 255
 400:	19 f0       	breq	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	b3 c0       	rjmp	.+358    	; 0x56a <__fp_inf>
 404:	51 11       	cpse	r21, r1
 406:	fc c0       	rjmp	.+504    	; 0x600 <__fp_szero>
 408:	b6 c0       	rjmp	.+364    	; 0x576 <__fp_nan>

0000040a <__divsf3x>:
 40a:	d7 d0       	rcall	.+430    	; 0x5ba <__fp_split3>
 40c:	98 f3       	brcs	.-26     	; 0x3f4 <__divsf3+0x4>

0000040e <__divsf3_pse>:
 40e:	99 23       	and	r25, r25
 410:	c9 f3       	breq	.-14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 412:	55 23       	and	r21, r21
 414:	b1 f3       	breq	.-20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 416:	95 1b       	sub	r25, r21
 418:	55 0b       	sbc	r21, r21
 41a:	bb 27       	eor	r27, r27
 41c:	aa 27       	eor	r26, r26
 41e:	62 17       	cp	r22, r18
 420:	73 07       	cpc	r23, r19
 422:	84 07       	cpc	r24, r20
 424:	38 f0       	brcs	.+14     	; 0x434 <__divsf3_pse+0x26>
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	44 1f       	adc	r20, r20
 430:	aa 1f       	adc	r26, r26
 432:	a9 f3       	breq	.-22     	; 0x41e <__divsf3_pse+0x10>
 434:	33 d0       	rcall	.+102    	; 0x49c <__divsf3_pse+0x8e>
 436:	0e 2e       	mov	r0, r30
 438:	3a f0       	brmi	.+14     	; 0x448 <__divsf3_pse+0x3a>
 43a:	e0 e8       	ldi	r30, 0x80	; 128
 43c:	30 d0       	rcall	.+96     	; 0x49e <__divsf3_pse+0x90>
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	e6 95       	lsr	r30
 444:	00 1c       	adc	r0, r0
 446:	ca f7       	brpl	.-14     	; 0x43a <__divsf3_pse+0x2c>
 448:	29 d0       	rcall	.+82     	; 0x49c <__divsf3_pse+0x8e>
 44a:	fe 2f       	mov	r31, r30
 44c:	27 d0       	rcall	.+78     	; 0x49c <__divsf3_pse+0x8e>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	bb 1f       	adc	r27, r27
 456:	26 17       	cp	r18, r22
 458:	37 07       	cpc	r19, r23
 45a:	48 07       	cpc	r20, r24
 45c:	ab 07       	cpc	r26, r27
 45e:	b0 e8       	ldi	r27, 0x80	; 128
 460:	09 f0       	breq	.+2      	; 0x464 <__divsf3_pse+0x56>
 462:	bb 0b       	sbc	r27, r27
 464:	80 2d       	mov	r24, r0
 466:	bf 01       	movw	r22, r30
 468:	ff 27       	eor	r31, r31
 46a:	93 58       	subi	r25, 0x83	; 131
 46c:	5f 4f       	sbci	r21, 0xFF	; 255
 46e:	2a f0       	brmi	.+10     	; 0x47a <__divsf3_pse+0x6c>
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	51 05       	cpc	r21, r1
 474:	68 f0       	brcs	.+26     	; 0x490 <__divsf3_pse+0x82>
 476:	79 c0       	rjmp	.+242    	; 0x56a <__fp_inf>
 478:	c3 c0       	rjmp	.+390    	; 0x600 <__fp_szero>
 47a:	5f 3f       	cpi	r21, 0xFF	; 255
 47c:	ec f3       	brlt	.-6      	; 0x478 <__divsf3_pse+0x6a>
 47e:	98 3e       	cpi	r25, 0xE8	; 232
 480:	dc f3       	brlt	.-10     	; 0x478 <__divsf3_pse+0x6a>
 482:	86 95       	lsr	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b7 95       	ror	r27
 48a:	f7 95       	ror	r31
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	c9 f7       	brne	.-14     	; 0x482 <__divsf3_pse+0x74>
 490:	88 0f       	add	r24, r24
 492:	91 1d       	adc	r25, r1
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	97 f9       	bld	r25, 7
 49a:	08 95       	ret
 49c:	e1 e0       	ldi	r30, 0x01	; 1
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	bb 1f       	adc	r27, r27
 4a6:	62 17       	cp	r22, r18
 4a8:	73 07       	cpc	r23, r19
 4aa:	84 07       	cpc	r24, r20
 4ac:	ba 07       	cpc	r27, r26
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__divsf3_pse+0xaa>
 4b0:	62 1b       	sub	r22, r18
 4b2:	73 0b       	sbc	r23, r19
 4b4:	84 0b       	sbc	r24, r20
 4b6:	ba 0b       	sbc	r27, r26
 4b8:	ee 1f       	adc	r30, r30
 4ba:	88 f7       	brcc	.-30     	; 0x49e <__divsf3_pse+0x90>
 4bc:	e0 95       	com	r30
 4be:	08 95       	ret

000004c0 <__fixsfsi>:
 4c0:	04 d0       	rcall	.+8      	; 0x4ca <__fixunssfsi>
 4c2:	68 94       	set
 4c4:	b1 11       	cpse	r27, r1
 4c6:	9c c0       	rjmp	.+312    	; 0x600 <__fp_szero>
 4c8:	08 95       	ret

000004ca <__fixunssfsi>:
 4ca:	7f d0       	rcall	.+254    	; 0x5ca <__fp_splitA>
 4cc:	88 f0       	brcs	.+34     	; 0x4f0 <__fixunssfsi+0x26>
 4ce:	9f 57       	subi	r25, 0x7F	; 127
 4d0:	90 f0       	brcs	.+36     	; 0x4f6 <__fixunssfsi+0x2c>
 4d2:	b9 2f       	mov	r27, r25
 4d4:	99 27       	eor	r25, r25
 4d6:	b7 51       	subi	r27, 0x17	; 23
 4d8:	a0 f0       	brcs	.+40     	; 0x502 <__fixunssfsi+0x38>
 4da:	d1 f0       	breq	.+52     	; 0x510 <__fixunssfsi+0x46>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a f0       	brmi	.+6      	; 0x4ec <__fixunssfsi+0x22>
 4e6:	ba 95       	dec	r27
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <__fixunssfsi+0x12>
 4ea:	12 c0       	rjmp	.+36     	; 0x510 <__fixunssfsi+0x46>
 4ec:	b1 30       	cpi	r27, 0x01	; 1
 4ee:	81 f0       	breq	.+32     	; 0x510 <__fixunssfsi+0x46>
 4f0:	86 d0       	rcall	.+268    	; 0x5fe <__fp_zero>
 4f2:	b1 e0       	ldi	r27, 0x01	; 1
 4f4:	08 95       	ret
 4f6:	83 c0       	rjmp	.+262    	; 0x5fe <__fp_zero>
 4f8:	67 2f       	mov	r22, r23
 4fa:	78 2f       	mov	r23, r24
 4fc:	88 27       	eor	r24, r24
 4fe:	b8 5f       	subi	r27, 0xF8	; 248
 500:	39 f0       	breq	.+14     	; 0x510 <__fixunssfsi+0x46>
 502:	b9 3f       	cpi	r27, 0xF9	; 249
 504:	cc f3       	brlt	.-14     	; 0x4f8 <__fixunssfsi+0x2e>
 506:	86 95       	lsr	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b3 95       	inc	r27
 50e:	d9 f7       	brne	.-10     	; 0x506 <__fixunssfsi+0x3c>
 510:	3e f4       	brtc	.+14     	; 0x520 <__fixunssfsi+0x56>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__fp_cmp>:
 522:	99 0f       	add	r25, r25
 524:	00 08       	sbc	r0, r0
 526:	55 0f       	add	r21, r21
 528:	aa 0b       	sbc	r26, r26
 52a:	e0 e8       	ldi	r30, 0x80	; 128
 52c:	fe ef       	ldi	r31, 0xFE	; 254
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	e8 07       	cpc	r30, r24
 534:	f9 07       	cpc	r31, r25
 536:	c0 f0       	brcs	.+48     	; 0x568 <__fp_cmp+0x46>
 538:	12 16       	cp	r1, r18
 53a:	13 06       	cpc	r1, r19
 53c:	e4 07       	cpc	r30, r20
 53e:	f5 07       	cpc	r31, r21
 540:	98 f0       	brcs	.+38     	; 0x568 <__fp_cmp+0x46>
 542:	62 1b       	sub	r22, r18
 544:	73 0b       	sbc	r23, r19
 546:	84 0b       	sbc	r24, r20
 548:	95 0b       	sbc	r25, r21
 54a:	39 f4       	brne	.+14     	; 0x55a <__fp_cmp+0x38>
 54c:	0a 26       	eor	r0, r26
 54e:	61 f0       	breq	.+24     	; 0x568 <__fp_cmp+0x46>
 550:	23 2b       	or	r18, r19
 552:	24 2b       	or	r18, r20
 554:	25 2b       	or	r18, r21
 556:	21 f4       	brne	.+8      	; 0x560 <__fp_cmp+0x3e>
 558:	08 95       	ret
 55a:	0a 26       	eor	r0, r26
 55c:	09 f4       	brne	.+2      	; 0x560 <__fp_cmp+0x3e>
 55e:	a1 40       	sbci	r26, 0x01	; 1
 560:	a6 95       	lsr	r26
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	81 1d       	adc	r24, r1
 566:	81 1d       	adc	r24, r1
 568:	08 95       	ret

0000056a <__fp_inf>:
 56a:	97 f9       	bld	r25, 7
 56c:	9f 67       	ori	r25, 0x7F	; 127
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	08 95       	ret

00000576 <__fp_nan>:
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	80 ec       	ldi	r24, 0xC0	; 192
 57a:	08 95       	ret

0000057c <__fp_pscA>:
 57c:	00 24       	eor	r0, r0
 57e:	0a 94       	dec	r0
 580:	16 16       	cp	r1, r22
 582:	17 06       	cpc	r1, r23
 584:	18 06       	cpc	r1, r24
 586:	09 06       	cpc	r0, r25
 588:	08 95       	ret

0000058a <__fp_pscB>:
 58a:	00 24       	eor	r0, r0
 58c:	0a 94       	dec	r0
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	05 06       	cpc	r0, r21
 596:	08 95       	ret

00000598 <__fp_round>:
 598:	09 2e       	mov	r0, r25
 59a:	03 94       	inc	r0
 59c:	00 0c       	add	r0, r0
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__fp_round+0xc>
 5a0:	88 23       	and	r24, r24
 5a2:	52 f0       	brmi	.+20     	; 0x5b8 <__fp_round+0x20>
 5a4:	bb 0f       	add	r27, r27
 5a6:	40 f4       	brcc	.+16     	; 0x5b8 <__fp_round+0x20>
 5a8:	bf 2b       	or	r27, r31
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__fp_round+0x18>
 5ac:	60 ff       	sbrs	r22, 0
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__fp_round+0x20>
 5b0:	6f 5f       	subi	r22, 0xFF	; 255
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__fp_split3>:
 5ba:	57 fd       	sbrc	r21, 7
 5bc:	90 58       	subi	r25, 0x80	; 128
 5be:	44 0f       	add	r20, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	59 f0       	breq	.+22     	; 0x5da <__fp_splitA+0x10>
 5c4:	5f 3f       	cpi	r21, 0xFF	; 255
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <__fp_splitA+0x1a>
 5c8:	47 95       	ror	r20

000005ca <__fp_splitA>:
 5ca:	88 0f       	add	r24, r24
 5cc:	97 fb       	bst	r25, 7
 5ce:	99 1f       	adc	r25, r25
 5d0:	61 f0       	breq	.+24     	; 0x5ea <__fp_splitA+0x20>
 5d2:	9f 3f       	cpi	r25, 0xFF	; 255
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <__fp_splitA+0x2a>
 5d6:	87 95       	ror	r24
 5d8:	08 95       	ret
 5da:	12 16       	cp	r1, r18
 5dc:	13 06       	cpc	r1, r19
 5de:	14 06       	cpc	r1, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	f2 cf       	rjmp	.-28     	; 0x5c8 <__fp_split3+0xe>
 5e4:	46 95       	lsr	r20
 5e6:	f1 df       	rcall	.-30     	; 0x5ca <__fp_splitA>
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <__fp_splitA+0x30>
 5ea:	16 16       	cp	r1, r22
 5ec:	17 06       	cpc	r1, r23
 5ee:	18 06       	cpc	r1, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	f1 cf       	rjmp	.-30     	; 0x5d6 <__fp_splitA+0xc>
 5f4:	86 95       	lsr	r24
 5f6:	71 05       	cpc	r23, r1
 5f8:	61 05       	cpc	r22, r1
 5fa:	08 94       	sec
 5fc:	08 95       	ret

000005fe <__fp_zero>:
 5fe:	e8 94       	clt

00000600 <__fp_szero>:
 600:	bb 27       	eor	r27, r27
 602:	66 27       	eor	r22, r22
 604:	77 27       	eor	r23, r23
 606:	cb 01       	movw	r24, r22
 608:	97 f9       	bld	r25, 7
 60a:	08 95       	ret

0000060c <__gesf2>:
 60c:	8a df       	rcall	.-236    	; 0x522 <__fp_cmp>
 60e:	08 f4       	brcc	.+2      	; 0x612 <__gesf2+0x6>
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	08 95       	ret

00000614 <__mulsf3>:
 614:	0b d0       	rcall	.+22     	; 0x62c <__mulsf3x>
 616:	c0 cf       	rjmp	.-128    	; 0x598 <__fp_round>
 618:	b1 df       	rcall	.-158    	; 0x57c <__fp_pscA>
 61a:	28 f0       	brcs	.+10     	; 0x626 <__mulsf3+0x12>
 61c:	b6 df       	rcall	.-148    	; 0x58a <__fp_pscB>
 61e:	18 f0       	brcs	.+6      	; 0x626 <__mulsf3+0x12>
 620:	95 23       	and	r25, r21
 622:	09 f0       	breq	.+2      	; 0x626 <__mulsf3+0x12>
 624:	a2 cf       	rjmp	.-188    	; 0x56a <__fp_inf>
 626:	a7 cf       	rjmp	.-178    	; 0x576 <__fp_nan>
 628:	11 24       	eor	r1, r1
 62a:	ea cf       	rjmp	.-44     	; 0x600 <__fp_szero>

0000062c <__mulsf3x>:
 62c:	c6 df       	rcall	.-116    	; 0x5ba <__fp_split3>
 62e:	a0 f3       	brcs	.-24     	; 0x618 <__mulsf3+0x4>

00000630 <__mulsf3_pse>:
 630:	95 9f       	mul	r25, r21
 632:	d1 f3       	breq	.-12     	; 0x628 <__mulsf3+0x14>
 634:	95 0f       	add	r25, r21
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	55 1f       	adc	r21, r21
 63a:	62 9f       	mul	r22, r18
 63c:	f0 01       	movw	r30, r0
 63e:	72 9f       	mul	r23, r18
 640:	bb 27       	eor	r27, r27
 642:	f0 0d       	add	r31, r0
 644:	b1 1d       	adc	r27, r1
 646:	63 9f       	mul	r22, r19
 648:	aa 27       	eor	r26, r26
 64a:	f0 0d       	add	r31, r0
 64c:	b1 1d       	adc	r27, r1
 64e:	aa 1f       	adc	r26, r26
 650:	64 9f       	mul	r22, r20
 652:	66 27       	eor	r22, r22
 654:	b0 0d       	add	r27, r0
 656:	a1 1d       	adc	r26, r1
 658:	66 1f       	adc	r22, r22
 65a:	82 9f       	mul	r24, r18
 65c:	22 27       	eor	r18, r18
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	62 1f       	adc	r22, r18
 664:	73 9f       	mul	r23, r19
 666:	b0 0d       	add	r27, r0
 668:	a1 1d       	adc	r26, r1
 66a:	62 1f       	adc	r22, r18
 66c:	83 9f       	mul	r24, r19
 66e:	a0 0d       	add	r26, r0
 670:	61 1d       	adc	r22, r1
 672:	22 1f       	adc	r18, r18
 674:	74 9f       	mul	r23, r20
 676:	33 27       	eor	r19, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	23 1f       	adc	r18, r19
 67e:	84 9f       	mul	r24, r20
 680:	60 0d       	add	r22, r0
 682:	21 1d       	adc	r18, r1
 684:	82 2f       	mov	r24, r18
 686:	76 2f       	mov	r23, r22
 688:	6a 2f       	mov	r22, r26
 68a:	11 24       	eor	r1, r1
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	8a f0       	brmi	.+34     	; 0x6b4 <__mulsf3_pse+0x84>
 692:	e1 f0       	breq	.+56     	; 0x6cc <__mulsf3_pse+0x9c>
 694:	88 23       	and	r24, r24
 696:	4a f0       	brmi	.+18     	; 0x6aa <__mulsf3_pse+0x7a>
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	bb 1f       	adc	r27, r27
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	91 50       	subi	r25, 0x01	; 1
 6a6:	50 40       	sbci	r21, 0x00	; 0
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__mulsf3_pse+0x64>
 6aa:	9e 3f       	cpi	r25, 0xFE	; 254
 6ac:	51 05       	cpc	r21, r1
 6ae:	70 f0       	brcs	.+28     	; 0x6cc <__mulsf3_pse+0x9c>
 6b0:	5c cf       	rjmp	.-328    	; 0x56a <__fp_inf>
 6b2:	a6 cf       	rjmp	.-180    	; 0x600 <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	ec f3       	brlt	.-6      	; 0x6b2 <__mulsf3_pse+0x82>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	dc f3       	brlt	.-10     	; 0x6b2 <__mulsf3_pse+0x82>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	e7 95       	ror	r30
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	c1 f7       	brne	.-16     	; 0x6bc <__mulsf3_pse+0x8c>
 6cc:	fe 2b       	or	r31, r30
 6ce:	88 0f       	add	r24, r24
 6d0:	91 1d       	adc	r25, r1
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__tablejump2__>:
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	00 24       	eor	r0, r0
 6e0:	00 1c       	adc	r0, r0
 6e2:	0b be       	out	0x3b, r0	; 59
 6e4:	07 90       	elpm	r0, Z+
 6e6:	f6 91       	elpm	r31, Z
 6e8:	e0 2d       	mov	r30, r0
 6ea:	09 94       	ijmp

000006ec <_exit>:
 6ec:	f8 94       	cli

000006ee <__stop_program>:
 6ee:	ff cf       	rjmp	.-2      	; 0x6ee <__stop_program>
